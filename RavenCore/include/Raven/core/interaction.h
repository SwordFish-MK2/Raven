#ifndef _RAVEN_CORE_INTERACTION_H_
#define _RAVEN_CORE_INTERACTION_H_

#include<Raven/core/base.h>
#include<Raven/core/math.h>
#include<Raven/core/ray.h>
#include<Raven/core/spectrum.h>


namespace Raven {
	struct Interaction {

	};

	struct MediumInterface {
		//interface
		MediumInterface(
			const std::shared_ptr<Medium>& medium
		) :outside(medium), inside(medium) {}
		MediumInterface(
			const std::shared_ptr<Medium>& outside,
			const std::shared_ptr<Medium>& inside) :
			outside(outside), inside(inside) {}

		//data
		std::shared_ptr<Medium> outside;
		std::shared_ptr<Medium> inside;
	};

	struct SurfaceInteraction :public Interaction {
		double t;//光线的传播距离参数t
		double eta = 1;//refract index
		Point2f uv;//texture coodinate
		Point3f p;//intersected point 
		Normal3f n;//surface normal
		Material* mate_ptr;//surface material
		Shape* shape;
		std::shared_ptr<BSDF> bsdf;//generated by surface material
		bool hitLight;
		const AreaLight* light;
		Vector3f emit;

		//交点所在平面的偏导数
		Vector3f dpdu, dpdv;
		Vector3f dndu, dndv;
		Vector3f wo;

		//关于像素的偏导，用于计算ImageTexture filter的大小
		Vector3f dpdx, dpdy;
		double dudx, dudy, dvdx, dvdy;

		//shading geometry
		struct {
			Normal3f n;
			Vector3f dpdu, dpdv;
			Vector3f dndu, dndv;
		}shading;

		void SetShadingGeometry(const Vector3f& dpdu, const Vector3f& dpdv,
			const Normal3f& dndu, const Normal3f& dndv);

		//计算dudx dudy dvdx dvdy
		void computeDifferential(const RayDifferential& rd);

		Spectrum Le(const Vector3f& wi)const;

		Ray scartterRay(const Vector3f& dir)const;
	};
}

#endif