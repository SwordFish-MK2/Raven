#ifndef _RAVEN_CORE_INTERACTION_H_
#define _RAVEN_CORE_INTERACTION_H_

#include<Raven/core/base.h>
#include<Raven/core/math.h>
#include<Raven/core/ray.h>
#include<Raven/core/spectrum.h>
#include<Raven/core/medium.h>


namespace Raven {
	struct Interaction {
	public:
		Interaction() :time(0), t(0) {}

		Interaction(const Point3f& p, const Normal3f& n,
			const Vector3f& wo, double time,
			const MediumInterface& mediumInterface);
		Interaction(const Point3f& p, const Normal3f& n,
			const Vector3f& wo, double time = 0.0, double t = 0.0);

		Interaction(const Point3f& p, const Vector3f& wo, double time, double t,
			const MediumInterface& mediumInterface);

		Interaction(const Point3f& p, double time, double t,
			const MediumInterface& mediumInterface);

		bool isSurfaceInteraction() { return n == Normal3f(); }

		bool isMediumInteraction() { return !isSurfaceInteraction(); }

		//getMedium函数只在存在medium的场景时使用
		//对于SurfaceInteraction，调用该函数传入散射光线的方向
		//返回散射光线所在介质的指针
		const Ref<Medium> getMedium(const Vector3f& w)const;

		//对于MediumIntraction,调用该重载直接返回所处介质的指针
		const Ref<Medium> getMedium()const;
	public:
		Point3f p;//交点
		double t;//光线传播的距离参数
		double time;//光线由相机出射的时间
		Vector3f wo;//光线的反方向
		Normal3f n;//几何法线
		MediumInterface mediumInterface;//表面两边的介质
	};

	struct SurfaceInteraction :public Interaction {

		//interface
		SurfaceInteraction() {}

		SurfaceInteraction(
			const Point3f& p, const Normal3f& n,
			const Vector3f& wo, const Point2f& uv,
			const Vector3f& dpdu, const Vector3f& dpdv,
			const Vector3f& dndu, const Vector3f& dndv,
			double time = 0.0, double t = 0.0);

		void setShadingGeometry(const Vector3f& dpdu, const Vector3f& dpdv,
			const Vector3f& dndu, const Vector3f& dndv);

		//计算dudx dudy dvdx dvdy
		void computeDifferential(const RayDifferential& rd);

		Spectrum Le(const Vector3f& wi)const;

		Ray scartterRay(const Vector3f& dir)const;

		//data
		Material* mate_ptr;//surface material
		Shape* shape;
		std::shared_ptr<BSDF> bsdf;//generated by surface material
		bool hitLight;
		const AreaLight* light;
		Vector3f emit;

		Point2f uv;//交点的uv坐标

		//交点所在平面的偏导数
		Vector3f dpdu, dpdv;
		Vector3f dndu, dndv;

		//关于像素的偏导，用于计算ImageTexture filter的大小
		mutable Vector3f dpdx, dpdy;
		mutable double dudx, dudy, dvdx, dvdy;

		//shading geometry
		struct {
			Normal3f n;
			Vector3f dpdu, dpdv;
			Vector3f dndu, dndv;
		}shading;
	};

	struct MediumInteraction :public Interaction {
		MediumInteraction(const Point3f& p, const Vector3f& wo, double time,
			double t, const Ref<Medium> medium, const Ref<PhaseFunction>& phase);

		const Ref<PhaseFunction> phase;
	};
}

#endif